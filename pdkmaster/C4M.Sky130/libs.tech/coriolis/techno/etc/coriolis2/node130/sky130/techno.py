
# Autogenerated file
# SPDX-License-Identifier: GPL-2.0-or-later OR AGPL-3.0-or-later OR CERN-OHL-S-2.0+
# Autogenerated file. Changes will be overwritten.

from coriolis import CRL, Hurricane, Viewer, Cfg
from coriolis.Hurricane import (
    Technology, DataBase, DbU, Library,
    Layer, BasicLayer,
    Cell, Net, Horizontal, Vertical, Rectilinear, Box, Point,
    NetExternalComponents,
)
from coriolis.technos.common.colors import toRGB
from coriolis.technos.common.patterns import toHexa
from coriolis.helpers import u
from coriolis.helpers.technology import createBL, createVia
from coriolis.helpers.overlay import CfgCache
from coriolis.helpers.analogtechno import Length, Area, Unit, Asymmetric, loadAnalogTechno

__all__ = ["analogTechnologyTable", "setup"]

analogTechnologyTable = (
    ('Header', 'Sky130', DbU.UnitPowerMicro, 'alpha'),
    ('PhysicalGrid', 0.005, Length, ''),

    ('minWidth', 'dnm', 3.0, Length, ''),
    ('minSpacing', 'dnm', 6.3, Length, ''),
    ('minWidth', 'nwm', 0.84, Length, ''),
    ('minSpacing', 'nwm', 1.27, Length, ''),
    ('minWidth', 'hvtp', 0.38, Length, ''),
    ('minSpacing', 'hvtp', 0.38, Length, ''),
    ('minArea', 'hvtp', 0.265, Area, ''),
    ('minWidth', 'lvtn', 0.38, Length, ''),
    ('minSpacing', 'lvtn', 0.38, Length, ''),
    ('minArea', 'lvtn', 0.265, Area, ''),
    ('minWidth', 'nsdm', 0.38, Length, ''),
    ('minSpacing', 'nsdm', 0.38, Length, ''),
    ('minArea', 'nsdm', 0.265, Area, ''),
    ('minWidth', 'psdm', 0.38, Length, ''),
    ('minSpacing', 'psdm', 0.38, Length, ''),
    ('minArea', 'psdm', 0.265, Area, ''),
    ('minWidth', 'hvi', 0.6, Length, ''),
    ('minSpacing', 'hvi', 0.7, Length, ''),
    ('minWidth', 'difftap', 0.15, Length, ''),
    ('minSpacing', 'difftap', 0.27, Length, ''),
    ('minEnclosure', 'nwm', 'difftap', (0.18, 0.18), Length|Asymmetric, ''),
    ('minSpacing', 'nwm', 'difftap',  (0.34, 0.34), Length|Asymmetric, ''),
    # TODO for difftap:
    #    allow_in_substrate, implant_abut, allow_contactless_implant, allow_well_crossing
    ('minWidth', 'poly', 0.15, Length, ''),
    ('minSpacing', 'poly', 0.21, Length, ''),
    ('minWidth', 'li', 0.17, Length, ''),
    ('minSpacing', 'li', 0.17, Length, ''),
    ('minWidth', 'm1', 0.14, Length, ''),
    ('minSpacing', 'm1', 0.14, Length, ''),
    ('minArea', 'm1', 0.083, Area, ''),
    ('minWidth', 'm2', 0.14, Length, ''),
    ('minSpacing', 'm2', 0.14, Length, ''),
    ('minArea', 'm2', 0.0676, Area, ''),
    ('minWidth', 'm3', 0.3, Length, ''),
    ('minSpacing', 'm3', 0.3, Length, ''),
    ('minArea', 'm3', 0.24, Area, ''),
    ('minWidth', 'capm', 1.0, Length, ''),
    ('minSpacing', 'capm', 0.84, Length, ''),
    ('minWidth', 'cap2m', 1.0, Length, ''),
    ('minSpacing', 'cap2m', 0.84, Length, ''),
    ('minWidth', 'm4', 0.3, Length, ''),
    ('minSpacing', 'm4', 0.3, Length, ''),
    ('minArea', 'm4', 0.24, Area, ''),
    ('minWidth', 'm5', 1.6, Length, ''),
    ('minSpacing', 'm5', 1.6, Length, ''),
    ('minArea', 'm5', 4.0, Area, ''),
    ('minWidth', 'licon', 0.17, Length, ''),
    ('maxWidth', 'licon', 0.17, Length, ''),
    ('minSpacing', 'licon', 0.17, Length, ''),
    ('minEnclosure', 'difftap', 'licon', (0.04, 0.12), Length|Asymmetric, ''),
    ('minEnclosure', 'poly', 'licon', (0.05, 0.08), Length|Asymmetric, ''),
    ('minEnclosure', 'li', 'licon', (0.0, 0.08), Length|Asymmetric, ''),
    ('minWidth', 'mcon', 0.17, Length, ''),
    ('maxWidth', 'mcon', 0.17, Length, ''),
    ('minSpacing', 'mcon', 0.19, Length, ''),
    ('minEnclosure', 'li', 'mcon', (0.0, 0.0), Length|Asymmetric, ''),
    ('minEnclosure', 'm1', 'mcon', (0.03, 0.06), Length|Asymmetric, ''),
    ('minWidth', 'via', 0.15, Length, ''),
    ('maxWidth', 'via', 0.15, Length, ''),
    ('minSpacing', 'via', 0.17, Length, ''),
    ('minEnclosure', 'm1', 'via', (0.055, 0.085), Length|Asymmetric, ''),
    ('minEnclosure', 'm2', 'via', (0.055, 0.085), Length|Asymmetric, ''),
    ('minWidth', 'via2', 0.2, Length, ''),
    ('maxWidth', 'via2', 0.2, Length, ''),
    ('minSpacing', 'via2', 0.2, Length, ''),
    ('minEnclosure', 'm2', 'via2', (0.04, 0.085), Length|Asymmetric, ''),
    ('minEnclosure', 'm3', 'via2', (0.065, 0.065), Length|Asymmetric, ''),
    ('minWidth', 'via3', 0.2, Length, ''),
    ('maxWidth', 'via3', 0.2, Length, ''),
    ('minSpacing', 'via3', 0.2, Length, ''),
    ('minEnclosure', 'm3', 'via3', (0.06, 0.09), Length|Asymmetric, ''),
    ('minEnclosure', 'capm', 'via3', (0.06, 0.09), Length|Asymmetric, ''),
    ('minEnclosure', 'm4', 'via3', (0.065, 0.065), Length|Asymmetric, ''),
    ('minWidth', 'via4', 0.8, Length, ''),
    ('maxWidth', 'via4', 0.8, Length, ''),
    ('minSpacing', 'via4', 0.8, Length, ''),
    ('minEnclosure', 'm4', 'via4', (0.19, 0.19), Length|Asymmetric, ''),
    ('minEnclosure', 'cap2m', 'via4', (0.19, 0.19), Length|Asymmetric, ''),
    ('minEnclosure', 'm5', 'via4', (0.31, 0.31), Length|Asymmetric, ''),
    # ('minTransistorL', 'hvmosgate', 0.5, Length, ''),
    # ('minTransistorW', 'hvmosgate', 0.42, Length, ''),
    # ('minGateExtension', 'difftap', 'hvmosgate', 0.25, Length|Asymmetric, ''),
    # ('minGateExtension', 'poly', 'hvmosgate', 0.13, Length|Asymmetric, ''),
    # ('minGateSpacing', 'licon', 'hvmosgate', 0.055, Length|Asymmetric, ''),
    # ('minTransistorW', 'mosgate', 0.42, Length, ''),
    # ('minGateExtension', 'difftap', 'mosgate', 0.25, Length|Asymmetric, ''),
    # ('minGateExtension', 'poly', 'mosgate', 0.13, Length|Asymmetric, ''),
    # ('minGateSpacing', 'licon', 'mosgate', 0.055, Length|Asymmetric, ''),
    # ('minTransistorW', 'mosgate_sc', 0.36, Length, ''),
    # ('minGateExtension', 'difftap', 'mosgate_sc', 0.25, Length|Asymmetric, ''),
    # ('minGateExtension', 'poly', 'mosgate_sc', 0.13, Length|Asymmetric, ''),
    # ('minGateSpacing', 'licon', 'mosgate_sc', 0.055, Length|Asymmetric, ''),
    # ('minGateEnclosure', 'nsdm', 'nfet_01v8', (0.07, 0.07), Length|Asymmetric, ''),
    # ('minGateEnclosure', 'nsdm', 'nfet_01v8_lvt', (0.07, 0.07), Length|Asymmetric, ''),
    # ('minGateEnclosure', 'lvtn', 'nfet_01v8_lvt', (0.07, 0.07), Length|Asymmetric, ''),
    # ('minGateEnclosure', 'nsdm', 'nfet_01v8_sc', (0.07, 0.07), Length|Asymmetric, ''),
    # ('minGateEnclosure', 'nsdm', 'nfet_g5v0d10v5', (0.07, 0.07), Length|Asymmetric, ''),
    # ('minGateEnclosure', 'psdm', 'pfet_01v8', (0.07, 0.07), Length|Asymmetric, ''),
    # ('minGateEnclosure', 'psdm', 'pfet_01v8_hvt', (0.07, 0.07), Length|Asymmetric, ''),
    # ('minGateEnclosure', 'hvtp', 'pfet_01v8_hvt', (0.07, 0.07), Length|Asymmetric, ''),
    # ('minGateEnclosure', 'psdm', 'pfet_01v8_lvt', (0.07, 0.07), Length|Asymmetric, ''),
    # ('minGateEnclosure', 'lvtn', 'pfet_01v8_lvt', (0.07, 0.07), Length|Asymmetric, ''),
    # ('minGateEnclosure', 'psdm', 'pfet_g5v0d10v5', (0.07, 0.07), Length|Asymmetric, ''),
    ('minWidth', 'pad', 40.0, Length, ''),
    ('minSpacing', 'pad', 1.27, Length, ''),
    ('minEnclosure', 'm5', 'pad', (1.0, 1.0), Length|Asymmetric, ''),
    # ('minWidth', 'poly_res', 0.33, Length, ''),
    # ('minSpacing', 'poly_res', 0.21, Length, ''),
    # ('minEnclosure', 'polyres', 'poly', 0.005, Length|Asymmetric, ''),
    # ('minWidth', 'pdiff_res', 0.33, Length, ''),
    # ('minSpacing', 'pdiff_res', 0.27, Length, ''),
    # ('minEnclosure', 'diffres', 'difftap', 0.005, Length|Asymmetric, ''),
    # ('minWidth', 'ndiff_res', 0.33, Length, ''),
    # ('minSpacing', 'ndiff_res', 0.27, Length, ''),
    # ('minEnclosure', 'diffres', 'difftap', 0.005, Length|Asymmetric, ''),
    # ('minWidth', 'MIM_m3_capm', 1.0, Length, ''),
    # TODO: MIMCapacitor rules
    # ('minWidth', 'MIM_m4_cap2m', 1.0, Length, ''),
    # TODO: MIMCapacitor rules
    # ('minWidth', 'ndiode', 0.15, Length, ''),
    # ('minEnclosure', 'areaid_diode', 'difftap', (0.005, 0.005), Length|Asymmetric, ''),
    # ('minWidth', 'pdiode', 0.15, Length, ''),
    # ('minEnclosure', 'areaid_diode', 'difftap', (0.005, 0.005), Length|Asymmetric, ''),
    # Not implemented: Bipolar 'npn_05v5_w1u00l2u00'
    # Not implemented: Bipolar 'npn_05v5_w1u00l1u00'
    # Not implemented: Bipolar 'pnp_05v5_w3u40l3u40'
    # Not implemented: Bipolar 'pnp_05v5_w0u68l0u68'
    ('minSpacing', 'difftap', 'hvi', 0.18, Length|Asymmetric, ''),
    ('minSpacing', 'licon', 'difftap', 0.19, Length|Asymmetric, ''),
    # ('minSpacing', 'intersect(difftap,hvi)', 0.3, Length, ''),
    ('minSpacing', 'difftap', 'poly', 0.075, Length|Asymmetric, ''),
    ('minSpacing', 'difftap', 'nwm', 0.34, Length|Asymmetric, ''),
    # ('minSpacing', 'intersect(licon,poly)', 'psdm', 0.11, Length|Asymmetric, ''),
)

def _setup_techno():
    db = DataBase.create()
    CRL.System.get()

    tech = Technology.create(db, 'Sky130')

    DbU.setPrecision(2)
    DbU.setPhysicalsPerGrid(0.005, DbU.UnitPowerMicro)
    with CfgCache(priority=Cfg.Parameter.Priority.ConfigurationFile) as cfg:
        cfg.gdsDriver.metricDbu = 1e-09
        cfg.gdsDriver.dbuPerUu = 0.001
    DbU.setGridsPerLambda(30)
    DbU.setSymbolicSnapGridStep(DbU.fromGrid(1.0))
    DbU.setPolygonStep(DbU.fromGrid(1.0))
    DbU.setStringMode(DbU.StringModePhysical, DbU.UnitPowerMicro)

    createBL(
        tech, 'dnm', BasicLayer.Material.nWell,
        size=u(3.0), spacing=u(6.3), gds2Layer=64, gds2DataType=18,
    )
    createBL(
        tech, 'nwm', BasicLayer.Material.nWell,
        size=u(0.84), spacing=u(1.27), gds2Layer=64, gds2DataType=20,
    )
    createBL(
        tech, 'hvtp', BasicLayer.Material.other,
        size=u(0.38), spacing=u(0.38), area=0.265, gds2Layer=78, gds2DataType=44,
    )
    createBL(
        tech, 'lvtn', BasicLayer.Material.other,
        size=u(0.38), spacing=u(0.38), area=0.265, gds2Layer=125, gds2DataType=44,
    )
    createBL(
        tech, 'nsdm', BasicLayer.Material.nImplant,
        size=u(0.38), spacing=u(0.38), area=0.265, gds2Layer=93, gds2DataType=44,
    )
    createBL(
        tech, 'psdm', BasicLayer.Material.pImplant,
        size=u(0.38), spacing=u(0.38), area=0.265, gds2Layer=94, gds2DataType=20,
    )
    createBL(
        tech, 'hvi', BasicLayer.Material.other,
        gds2Layer=75, gds2DataType=20,
    )
    createBL(
        tech, 'difftap.pin', BasicLayer.Material.other,
        gds2Layer=65, gds2DataType=16,
    )
    createBL(
        tech, 'difftap.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=10,
    )
    createBL(
        tech, 'poly.pin', BasicLayer.Material.other,
        gds2Layer=66, gds2DataType=16,
    )
    createBL(
        tech, 'poly.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=20,
    )
    createBL(
        tech, 'li.pin', BasicLayer.Material.other,
        gds2Layer=67, gds2DataType=16,
    )
    createBL(
        tech, 'li.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=40,
    )
    createBL(
        tech, 'm1.pin', BasicLayer.Material.other,
        gds2Layer=68, gds2DataType=16,
    )
    createBL(
        tech, 'm1.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=60,
    )
    createBL(
        tech, 'm2.pin', BasicLayer.Material.other,
        gds2Layer=69, gds2DataType=16,
    )
    createBL(
        tech, 'm2.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=80,
    )
    createBL(
        tech, 'm3.pin', BasicLayer.Material.other,
        gds2Layer=70, gds2DataType=16,
    )
    createBL(
        tech, 'm3.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=100,
    )
    createBL(
        tech, 'm4.pin', BasicLayer.Material.other,
        gds2Layer=71, gds2DataType=16,
    )
    createBL(
        tech, 'm4.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=120,
    )
    createBL(
        tech, 'm5.pin', BasicLayer.Material.other,
        gds2Layer=72, gds2DataType=16,
    )
    createBL(
        tech, 'm5.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=140,
    )
    createBL(
        tech, 'licon.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=30,
    )
    createBL(
        tech, 'mcon.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=50,
    )
    createBL(
        tech, 'via.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=70,
    )
    createBL(
        tech, 'via2.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=90,
    )
    createBL(
        tech, 'via3.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=110,
    )
    createBL(
        tech, 'via4.block', BasicLayer.Material.blockage,
        gds2Layer=100, gds2DataType=130,
    )
    createBL(
        tech, 'difftap', BasicLayer.Material.active,
        size=u(0.15), spacing=u(0.27), gds2Layer=65, gds2DataType=20,
    )
    createBL(
        tech, 'poly', BasicLayer.Material.poly,
        size=u(0.15), spacing=u(0.21), gds2Layer=66, gds2DataType=20,
    )
    createBL(
        tech, 'licon', BasicLayer.Material.cut,
        size=u(0.17), spacing=u(0.17), gds2Layer=66, gds2DataType=44,
    )
    createBL(
        tech, 'li', BasicLayer.Material.metal,
        size=u(0.17), spacing=u(0.17), gds2Layer=67, gds2DataType=20,
    )
    createBL(
        tech, 'mcon', BasicLayer.Material.cut,
        size=u(0.17), spacing=u(0.19), gds2Layer=67, gds2DataType=44,
    )
    createBL(
        tech, 'm1', BasicLayer.Material.metal,
        size=u(0.14), spacing=u(0.14), area=0.083, gds2Layer=68, gds2DataType=20,
    )
    createBL(
        tech, 'via', BasicLayer.Material.cut,
        size=u(0.15), spacing=u(0.17), gds2Layer=68, gds2DataType=44,
    )
    createBL(
        tech, 'm2', BasicLayer.Material.metal,
        size=u(0.14), spacing=u(0.14), area=0.0676, gds2Layer=69, gds2DataType=20,
    )
    createBL(
        tech, 'via2', BasicLayer.Material.cut,
        size=u(0.2), spacing=u(0.2), gds2Layer=69, gds2DataType=44,
    )
    createBL(
        tech, 'm3', BasicLayer.Material.metal,
        size=u(0.3), spacing=u(0.3), area=0.24, gds2Layer=70, gds2DataType=20,
    )
    createBL(
        tech, 'capm', BasicLayer.Material.metal,
        size=u(1.0), spacing=u(0.84), gds2Layer=89, gds2DataType=44,
    )
    createBL(
        tech, 'via3', BasicLayer.Material.cut,
        size=u(0.2), spacing=u(0.2), gds2Layer=70, gds2DataType=44,
    )
    createBL(
        tech, 'm4', BasicLayer.Material.metal,
        size=u(0.3), spacing=u(0.3), area=0.24, gds2Layer=71, gds2DataType=20,
    )
    createBL(
        tech, 'cap2m', BasicLayer.Material.metal,
        size=u(1.0), spacing=u(0.84), gds2Layer=97, gds2DataType=44,
    )
    createBL(
        tech, 'via4', BasicLayer.Material.cut,
        size=u(0.8), spacing=u(0.8), gds2Layer=71, gds2DataType=44,
    )
    createBL(
        tech, 'm5', BasicLayer.Material.metal,
        size=u(1.6), spacing=u(1.6), area=4.0, gds2Layer=72, gds2DataType=20,
    )
    createBL(
        tech, 'areaid_sc', BasicLayer.Material.other,
        gds2Layer=81, gds2DataType=4,
    )
    createBL(
        tech, 'pad', BasicLayer.Material.cut,
        size=u(40.0), spacing=u(1.27), gds2Layer=76, gds2DataType=20,
    )
    createBL(
        tech, 'npn', BasicLayer.Material.other,
        gds2Layer=82, gds2DataType=20,
    )
    createBL(
        tech, 'areaid_diode', BasicLayer.Material.other,
        gds2Layer=81, gds2DataType=23,
    )
    createBL(
        tech, 'polyres', BasicLayer.Material.other,
        gds2Layer=66, gds2DataType=13,
    )
    createBL(
        tech, 'diffres', BasicLayer.Material.other,
        gds2Layer=65, gds2DataType=13,
    )
    createBL(
        tech, 'pnp', BasicLayer.Material.other,
        gds2Layer=82, gds2DataType=44,
    )
    createBL(
        tech, 'prBoundary', BasicLayer.Material.other,
        gds2Layer=235, gds2DataType=4,
    )

    # ViaLayers
    # li<>mcon<>m1
    createVia(
        tech, 'li_mcon_m1', 'li', 'mcon', 'm1',
        u(0.17),
    )
    # m1<>via<>m2
    createVia(
        tech, 'm1_via_m2', 'm1', 'via', 'm2',
        u(0.15),
    )
    # m2<>via2<>m3
    createVia(
        tech, 'm2_via2_m3', 'm2', 'via2', 'm3',
        u(0.2),
    )
    # m3<>via3<>m4
    createVia(
        tech, 'm3_via3_m4', 'm3', 'via3', 'm4',
        u(0.2),
    )
    # capm<>via3<>m4
    createVia(
        tech, 'capm_via3_m4', 'capm', 'via3', 'm4',
        u(0.2),
    )
    # m4<>via4<>m5
    createVia(
        tech, 'm4_via4_m5', 'm4', 'via4', 'm5',
        u(0.8),
    )
    # cap2m<>via4<>m5
    createVia(
        tech, 'cap2m_via4_m5', 'cap2m', 'via4', 'm5',
        u(0.8),
    )

    # Blockages
    tech.getLayer('difftap').setBlockageLayer(
        tech.getLayer('difftap.block')
    )
    tech.getLayer('poly').setBlockageLayer(
        tech.getLayer('poly.block')
    )
    tech.getLayer('li').setBlockageLayer(
        tech.getLayer('li.block')
    )
    tech.getLayer('m1').setBlockageLayer(
        tech.getLayer('m1.block')
    )
    tech.getLayer('m2').setBlockageLayer(
        tech.getLayer('m2.block')
    )
    tech.getLayer('m3').setBlockageLayer(
        tech.getLayer('m3.block')
    )
    tech.getLayer('m4').setBlockageLayer(
        tech.getLayer('m4.block')
    )
    tech.getLayer('m5').setBlockageLayer(
        tech.getLayer('m5.block')
    )
    tech.getLayer('licon').setBlockageLayer(
        tech.getLayer('licon.block')
    )
    tech.getLayer('mcon').setBlockageLayer(
        tech.getLayer('mcon.block')
    )
    tech.getLayer('via').setBlockageLayer(
        tech.getLayer('via.block')
    )
    tech.getLayer('via2').setBlockageLayer(
        tech.getLayer('via2.block')
    )
    tech.getLayer('via3').setBlockageLayer(
        tech.getLayer('via3.block')
    )
    tech.getLayer('via4').setBlockageLayer(
        tech.getLayer('via4.block')
    )

    # Coriolis internal layers
    createBL(
        tech, 'text.cell', BasicLayer.Material.other,
    )
    createBL(
        tech, 'text.instance', BasicLayer.Material.other,
    )
    createBL(
        tech, 'SPL1', BasicLayer.Material.other,
    )
    createBL(
        tech, 'AutoLayer', BasicLayer.Material.other,
    )
    createBL(
        tech, 'gmetalh', BasicLayer.Material.metal,
    )
    createBL(
        tech, 'gcontact', BasicLayer.Material.cut,
    )
    createBL(
        tech, 'gmetalv', BasicLayer.Material.metal,
    )

    # Resistors
    # ResistorLayer.create(tech, 'poly_res', 'poly', 'polyres')
    # ResistorLayer.create(tech, 'pdiff_res', 'difftap', 'diffres')
    # ResistorLayer.create(tech, 'ndiff_res', 'difftap', 'diffres')

    # Capacitors
    # MIMCAP 'MIM_m3_capm': 'MIMTop(name=capm)' over 'MetalWire(name=m3)'# MIMCAP 'MIM_m4_cap2m': 'MIMTop(name=cap2m)' over 'MetalWire(name=m4)'
    # Transistors
    # GateLayer.create(tech, 'hvmosgate', 'difftap', 'poly', 'hvi')
    # GateLayer.create(tech, 'mosgate', 'difftap', 'poly')
    # GateLayer.create(tech, 'mosgate_sc', 'difftap', 'poly')
    # TransistorLayer.create(tech, 'nfet_01v8', 'mosgate', 'nsdm')
    # TransistorLayer.create(tech, 'nfet_01v8_lvt', 'mosgate', ('nsdm', 'lvtn'))
    # TransistorLayer.create(tech, 'nfet_01v8_sc', 'mosgate_sc', 'nsdm')
    # TransistorLayer.create(tech, 'nfet_g5v0d10v5', 'hvmosgate', 'nsdm')
    # TransistorLayer.create(tech, 'pfet_01v8', 'mosgate', 'psdm', 'nwm')
    # TransistorLayer.create(tech, 'pfet_01v8_hvt', 'mosgate', ('psdm', 'hvtp'), 'nwm')
    # TransistorLayer.create(tech, 'pfet_01v8_lvt', 'mosgate', ('psdm', 'lvtn'), 'nwm')
    # TransistorLayer.create(tech, 'pfet_g5v0d10v5', 'hvmosgate', 'psdm', 'nwm')

    # Bipolars
    # Not implemented: Bipolar 'npn_05v5_w1u00l2u00'# Not implemented: Bipolar 'npn_05v5_w1u00l1u00'# Not implemented: Bipolar 'pnp_05v5_w3u40l3u40'# Not implemented: Bipolar 'pnp_05v5_w0u68l0u68'
def _setup_display():
    # ----------------------------------------------------------------------
    # Style: Alliance.Classic [black]

    threshold = 0.2 if Viewer.Graphics.isHighDpi() else 0.1

    style = Viewer.DisplayStyle( 'Alliance.Classic [black]' )
    style.setDescription( 'Alliance Classic Look - black background' )
    style.setDarkening  ( Viewer.DisplayStyle.HSVr(1.0, 3.0, 2.5) )

    # Viewer.
    style.addDrawingStyle( group='Viewer', name='fallback'      , color=toRGB('Gray238'    ), border=1, pattern='55AA55AA55AA55AA' )
    style.addDrawingStyle( group='Viewer', name='background'    , color=toRGB('Gray50'     ), border=1 )
    style.addDrawingStyle( group='Viewer', name='foreground'    , color=toRGB('White'      ), border=1 )
    style.addDrawingStyle( group='Viewer', name='rubber'        , color=toRGB('192,0,192'  ), border=4, threshold=0.02 )
    style.addDrawingStyle( group='Viewer', name='phantom'       , color=toRGB('Seashell4'  ), border=1 )
    style.addDrawingStyle( group='Viewer', name='boundaries'    , color=toRGB('wheat1'     ), border=2, pattern='0000000000000000', threshold=0 )
    style.addDrawingStyle( group='Viewer', name='marker'        , color=toRGB('80,250,80'  ), border=1 )
    style.addDrawingStyle( group='Viewer', name='selectionDraw' , color=toRGB('White'      ), border=1 )
    style.addDrawingStyle( group='Viewer', name='selectionFill' , color=toRGB('White'      ), border=1 )
    style.addDrawingStyle( group='Viewer', name='grid'          , color=toRGB('White'      ), border=1, threshold=2.0 )
    style.addDrawingStyle( group='Viewer', name='spot'          , color=toRGB('White'      ), border=2, threshold=6.0 )
    style.addDrawingStyle( group='Viewer', name='ghost'         , color=toRGB('White'      ), border=1 )
    style.addDrawingStyle( group='Viewer', name='text.ruler'    , color=toRGB('White'      ), border=1, threshold=  0.0 )
    style.addDrawingStyle( group='Viewer', name='text.instance' , color=toRGB('White'      ), border=1, threshold=400.0 )
    style.addDrawingStyle( group='Viewer', name='text.reference', color=toRGB('White'      ), border=1, threshold=200.0 )
    style.addDrawingStyle( group='Viewer', name='undef'         , color=toRGB('Violet'     ), border=0, pattern='2244118822441188' )

    # Active Layers.
    style.addDrawingStyle(group='Active Layers', name='nwm', color=toRGB('Tan'), pattern=toHexa('urgo.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Active Layers', name='dnm', color=toRGB('LawnGreen'), pattern=toHexa('antihash0.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Active Layers', name='hvtp', color=toRGB('Yellow'), pattern=toHexa('antihash0.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Active Layers', name='lvtn', color=toRGB('Yellow'), pattern=toHexa('antihash0.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Active Layers', name='nsdm', color=toRGB('LawnGreen'), pattern=toHexa('antihash0.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Active Layers', name='psdm', color=toRGB('Yellow'), pattern=toHexa('antihash0.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Active Layers', name='difftap', color=toRGB('White'), pattern=toHexa('antihash0.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Active Layers', name='difftap.pin', color=toRGB('White'), pattern=toHexa('antihash0.8'), border=2, threshold=threshold)
    style.addDrawingStyle(group='Active Layers', name='poly', color=toRGB('Red'), pattern=toHexa('antihash0.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Active Layers', name='poly.pin', color=toRGB('Red'), pattern=toHexa('antihash0.8'), border=2, threshold=threshold)

    # Routing Layers.
    style.addDrawingStyle(group='Routing Layers', name='li', color=toRGB('Blue'), pattern=toHexa('slash.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='li.pin', color=toRGB('Blue'), pattern=toHexa('slash.8'), border=2, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='m1', color=toRGB('Aqua'), pattern=toHexa('poids4.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='m1.pin', color=toRGB('Aqua'), pattern=toHexa('poids4.8'), border=2, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='m2', color=toRGB('LightPink'), pattern=toHexa('poids4.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='m2.pin', color=toRGB('LightPink'), pattern=toHexa('poids4.8'), border=2, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='m3', color=toRGB('Green'), pattern=toHexa('poids4.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='m3.pin', color=toRGB('Green'), pattern=toHexa('poids4.8'), border=2, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='capm', color=toRGB('Yellow'), pattern=toHexa('poids4.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='cap2m', color=toRGB('Violet'), pattern=toHexa('poids4.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='m4', color=toRGB('Red'), pattern=toHexa('poids4.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='m4.pin', color=toRGB('Red'), pattern=toHexa('poids4.8'), border=2, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='m5', color=toRGB('Blue'), pattern=toHexa('poids4.8'), border=1, threshold=threshold)
    style.addDrawingStyle(group='Routing Layers', name='m5.pin', color=toRGB('Blue'), pattern=toHexa('poids4.8'), border=2, threshold=threshold)

    # Cuts (VIA holes).
    style.addDrawingStyle(group='Cuts (VIA holes', name='licon', color=toRGB('0,150,150'), threshold=threshold)
    style.addDrawingStyle(group='Cuts (VIA holes', name='mcon', color=toRGB('Aqua'), threshold=threshold)
    style.addDrawingStyle(group='Cuts (VIA holes', name='via', color=toRGB('LightPink'), threshold=threshold)
    style.addDrawingStyle(group='Cuts (VIA holes', name='via2', color=toRGB('Green'), threshold=threshold)
    style.addDrawingStyle(group='Cuts (VIA holes', name='via3', color=toRGB('Yellow'), threshold=threshold)
    style.addDrawingStyle(group='Cuts (VIA holes', name='via4', color=toRGB('Violet'), threshold=threshold)
    style.addDrawingStyle(group='Cuts (VIA holes', name='pad', color=toRGB('Red'), threshold=threshold)

    # Blockages.
    style.addDrawingStyle(group='Blockages', name='difftap.block', color=toRGB('Blue'), pattern=toHexa('slash.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='poly.block', color=toRGB('Aqua'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='li.block', color=toRGB('LightPink'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='m1.block', color=toRGB('Green'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='m2.block', color=toRGB('Yellow'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='m3.block', color=toRGB('Violet'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='m4.block', color=toRGB('Red'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='m5.block', color=toRGB('Blue'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='licon.block', color=toRGB('Aqua'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='mcon.block', color=toRGB('LightPink'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='via.block', color=toRGB('Green'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='via2.block', color=toRGB('Yellow'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='via3.block', color=toRGB('Violet'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)
    style.addDrawingStyle(group='Blockages', name='via4.block', color=toRGB('Red'), pattern=toHexa('poids4.8'), border=4, threshold=threshold)

    # Knick & Kite.
    style.addDrawingStyle( group='Knik & Kite', name='SPL1'           , color=toRGB('Red'        ) )
    style.addDrawingStyle( group='Knik & Kite', name='AutoLayer'      , color=toRGB('Magenta'    ) )
    style.addDrawingStyle( group='Knik & Kite', name='gmetalh'        , color=toRGB('128,255,200'), pattern=toHexa('antislash2.32'    ), border=1 )
    style.addDrawingStyle( group='Knik & Kite', name='gmetalv'        , color=toRGB('200,200,255'), pattern=toHexa('light_antihash1.8'), border=1 )
    style.addDrawingStyle( group='Knik & Kite', name='gcontact'       , color=toRGB('255,255,190'),                                      border=1 )
    style.addDrawingStyle( group='Knik & Kite', name='Anabatic::Edge' , color=toRGB('255,255,190'), pattern='0000000000000000'         , border=4, threshold=0.02 )
    style.addDrawingStyle( group='Knik & Kite', name='Anabatic::GCell', color=toRGB('255,255,190'), pattern='0000000000000000'         , border=2, threshold=threshold )

    Viewer.Graphics.addStyle( style )

    # ----------------------------------------------------------------------
    # Style: Alliance.Classic [white].

    style = Viewer.DisplayStyle( 'Alliance.Classic [white]' )
    style.inheritFrom( 'Alliance.Classic [black]' )
    style.setDescription( 'Alliance Classic Look - white background' )
    style.setDarkening  ( Viewer.DisplayStyle.HSVr(1.0, 3.0, 2.5) )

    style.addDrawingStyle( group='Viewer', name='background', color=toRGB('White'), border=1 )
    style.addDrawingStyle( group='Viewer', name='foreground', color=toRGB('Black'), border=1 )
    style.addDrawingStyle( group='Viewer', name='boundaries', color=toRGB('Black'), border=1, pattern='0000000000000000' )
    Viewer.Graphics.addStyle( style )

    Viewer.Graphics.setStyle( 'Alliance.Classic [black]' )

def setup():
    _setup_techno()
    _setup_display()
    loadAnalogTechno(analogTechnologyTable, __file__)
    try:
        from .techno_fix import fix
    except:
        pass
    else:
        fix()
